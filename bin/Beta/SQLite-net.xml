<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SQLite-net</name>
    </assembly>
    <members>
        <member name="F:SQLite.CreateFlags.None">
            <summary>
            Use the default creation options
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.ImplicitPK">
            <summary>
            Create a primary key index for a property called 'Id' (case-insensitive).
            This avoids the need for the [PrimaryKey] attribute.
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.ImplicitIndex">
            <summary>
            Create indices for properties ending in 'Id' (case-insensitive).
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.AllImplicit">
            <summary>
            Create a primary key for a property called 'Id' and
            create an indices for properties ending in 'Id' (case-insensitive).
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.AutoIncPK">
            <summary>
            Force the primary key property to be auto incrementing.
            This avoids the need for the [AutoIncrement] attribute.
            The primary key property on the class should have type int or long.
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.FullTextSearch3">
            <summary>
            Create virtual table using FTS3
            </summary>
        </member>
        <member name="F:SQLite.CreateFlags.FullTextSearch4">
            <summary>
            Create virtual table using FTS4
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnection">
            <summary>
            An open connection to a SQLite database.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.DatabasePath">
            <summary>
            Gets the database path used by this connection.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.LibVersionNumber">
            <summary>
            Gets the SQLite library version number. 3007014 would be v3.7.14
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TimeExecution">
            <summary>
            Whether Trace lines should be written that show the execution time of queries.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.Trace">
            <summary>
            Whether to write queries to <see cref="P:SQLite.SQLiteConnection.Tracer"/> during execution.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.Tracer">
            <summary>
            The delegate responsible for writing trace lines.
            </summary>
            <value>The tracer.</value>
        </member>
        <member name="P:SQLite.SQLiteConnection.StoreDateTimeAsTicks">
            <summary>
            Whether to store DateTime properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.StoreTimeSpanAsTicks">
            <summary>
            Whether to store TimeSpan properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.DateTimeStringFormat">
            <summary>
            The format to use when storing DateTime properties as strings. Ignored if StoreDateTimeAsTicks is true.
            </summary>
            <value>The date time string format.</value>
        </member>
        <member name="P:SQLite.SQLiteConnection.DateTimeStyle">
            <summary>
            The DateTimeStyles value to use when parsing a DateTime property string.
            </summary>
            <value>The date time style.</value>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="openFlags">
            Flags controlling how the connection should be opened.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(SQLite.SQLiteConnectionString)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="connectionString">
            Details on how to find and open the database.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.EnableWriteAheadLogging">
            <summary>
            Enables the write ahead logging. WAL is significantly faster in most scenarios
            by providing better concurrency and better disk IO performance than the normal
            journal mode. You only need to call this function once in the lifetime of the database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.Quote(System.String)">
            <summary>
            Convert an input string to a quoted SQL string that can be safely used in queries.
            </summary>
            <returns>The quoted string.</returns>
            <param name="unsafeString">The unsafe string to quote.</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.SetKey(System.String)">
            <summary>
            Sets the key used to encrypt/decrypt the database with "pragma key = ...".
            This must be the first thing you call before doing anything else with this connection
            if your database is encrypted.
            This only has an effect if you are using the SQLCipher nuget package.
            </summary>
            <param name="key">Ecryption key plain text that is converted to the real encryption key using PBKDF2 key derivation</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.SetKey(System.Byte[])">
            <summary>
            Sets the key used to encrypt/decrypt the database.
            This must be the first thing you call before doing anything else with this connection
            if your database is encrypted.
            This only has an effect if you are using the SQLCipher nuget package.
            </summary>
            <param name="key">256-bit (32 byte) ecryption key data</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.EnableLoadExtension(System.Boolean)">
            <summary>
            Enable or disable extension loading.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping(System.Type,SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>
            <returns>
            The mapping represents the schema of the columns of the database and contains
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping``1(SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>
            <returns>
            The mapping represents the schema of the columns of the database and contains
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable(SQLite.TableMapping)">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable``1(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable(System.Type,SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``2(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``3(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``4(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables``5(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTables(SQLite.CreateFlags,System.Type[])">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Creates an index for the specified object property.
            e.g. CreateIndex&lt;Client&gt;(c => c.Name);
            </summary>
            <typeparam name="T">Type to reflect to a database table.</typeparam>
            <param name="property">Property to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetTableInfo(System.String)">
            <summary>
            Query the built-in sqlite table_info table for a specific tables columns.
            </summary>
            <returns>The columns contains in the table.</returns>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="ps">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new SQLiteCommand given the command text with named arguments. Place a "[@:$]VVV"
            in the command text for each of the arguments. VVV represents an alphanumeric identifier.
            For example, @name :name and $name can all be used in the query.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of "[@:$]VVV" in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand" />
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method when return primitive values.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.QueryScalars``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns the first column of each row of the result.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for the first column of each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator (retrieved by calling GetEnumerator() on the result of this method)
            will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator (retrieved by calling GetEnumerator() on the result of this method)
            will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type.
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type.
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.FindWithQuery``1(System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.FindWithQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type.
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="P:SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:SQLite.SQLiteConnection.SaveTransactionPoint">
             <summary>
             Creates a savepoint in the database at the current point in the transaction timeline.
             Begins a new transaction if one is not in progress.
            
             Call <see cref="M:SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
             Call <see cref="M:SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
             Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
             </summary>
             <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Release(System.String)">
             <summary>
             Releases a savepoint returned from <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint
                makes changes since that savepoint permanent if the savepoint began the transaction,
                or otherwise the changes are permanent pending a call to <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            
             The RELEASE command is like a COMMIT for a SAVEPOINT.
             </summary>
             <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RunInTransaction(System.Action)">
            <summary>
            Executes <paramref name="action"/> within a (possibly nested) transaction by wrapping it in a SAVEPOINT. If an
            exception occurs the whole transaction is rolled back, not just the current savepoint. The exception
            is rethrown.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to perform within a transaction. <paramref name="action"/> can contain any number
            of operations on the connection but should never call <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or
            <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            <param name="runInTransaction"/>
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object,SQLite.TableMapping)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll(SQLite.TableMapping)">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Backup(System.String,System.String)">
            <summary>
            Backup the entire database to the specified path.
            </summary>
            <param name="destinationDatabasePath">Path to backup file.</param>
            <param name="databaseName">The name of the database to backup (usually "main").</param>
        </member>
        <member name="T:SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,System.Boolean,System.Object,System.Action{SQLite.SQLiteConnection},System.Action{SQLite.SQLiteConnection},System.String)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
            <param name="key">
            Specifies the encryption key to use on the database. Should be a string or a byte[].
            </param>
            <param name="preKeyAction">
            Executes prior to setting key for SQLCipher databases
            </param>
            <param name="postKeyAction">
            Executes after setting key for SQLCipher databases
            </param>
            <param name="vfsName">
            Specifies the Virtual File System to use on the database.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnectionString.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean,System.Object,System.Action{SQLite.SQLiteConnection},System.Action{SQLite.SQLiteConnection},System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnectionString with all the data needed to open an SQLiteConnection.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="openFlags">
            Flags controlling how the connection should be opened.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
            <param name="key">
            Specifies the encryption key to use on the database. Should be a string or a byte[].
            </param>
            <param name="preKeyAction">
            Executes prior to setting key for SQLCipher databases
            </param>
            <param name="postKeyAction">
            Executes after setting key for SQLCipher databases
            </param>
            <param name="vfsName">
            Specifies the Virtual File System to use on the database.
            </param>
            <param name="dateTimeStringFormat">
            Specifies the format to use when storing DateTime properties as strings.
            </param>
            <param name="storeTimeSpanAsTicks">
            Specifies whether to store TimeSpan properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeTimeSpanAsTicks = true.
            </param>
        </member>
        <member name="P:SQLite.TableAttribute.WithoutRowId">
             <summary>
             Flag whether to create the table without rowid (see https://sqlite.org/withoutrowid.html)
            
             The default is <c>false</c> so that sqlite adds an implicit <c>rowid</c> to every table created.
             </summary>
        </member>
        <member name="T:SQLite.CollationAttribute">
            <summary>
            Select the collating sequence to use on a column.
            "BINARY", "NOCASE", and "RTRIM" are supported.
            "BINARY" is the default.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
            <summary>
            Invoked every time an instance is loaded from the database.
            </summary>
            <param name='obj'>
            The newly created object.
            </param>
            <remarks>
            This can be overridden in combination with the <see cref="M:SQLite.SQLiteConnection.NewCommand"/>
            method to hook into the life-cycle of objects.
            </remarks>
        </member>
        <member name="T:SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters the query based on a predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Delete">
            <summary>
            Delete all the rows that match this query.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete all the rows that match this query and the given predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Take(System.Int32)">
            <summary>
            Yields a given number of elements from the query and then skips the remainder.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Skip(System.Int32)">
            <summary>
            Skips a given number of elements from the query and then yields the remainder.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ElementAt(System.Int32)">
            <summary>
            Returns the element at a given index
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="expression">The expression to compile</param>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="M:SQLite.TableQuery`1.Count">
            <summary>
            Execute SELECT COUNT(*) on the query
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Execute SELECT COUNT(*) on the query with an additional WHERE clause.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ToList">
            <summary>
            Queries the database and returns the results as a List.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.ToArray">
            <summary>
            Queries the database and returns the results as an array.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.First">
            <summary>
            Returns the first element of this query.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.FirstOrDefault">
            <summary>
            Returns the first element of this query, or null if no element is found.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.First(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate, or null
            if no element is found.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteAsyncConnection">
            <summary>
            A pooled asynchronous connection to a SQLite database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteAsyncConnection and opens a pooled SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteAsyncConnection and opens a pooled SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="openFlags">
            Flags controlling how the connection should be opened.
            Async connections should have the FullMutex flag set to provide best performance.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The value of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            If you use DateTimeOffset properties, it will be always stored as ticks regardingless
            the storeDateTimeAsTicks parameter.
            </param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.#ctor(SQLite.SQLiteConnectionString)">
            <summary>
            Constructs a new SQLiteAsyncConnection and opens a pooled SQLite database
            using the given connection string.
            </summary>
            <param name="connectionString">
            Details on how to find and open the database.
            </param>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.DatabasePath">
            <summary>
            Gets the database path used by this connection.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.LibVersionNumber">
            <summary>
            Gets the SQLite library version number. 3007014 would be v3.7.14
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.DateTimeStringFormat">
            <summary>
            The format to use when storing DateTime properties as strings. Ignored if StoreDateTimeAsTicks is true.
            </summary>
            <value>The date time string format.</value>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetBusyTimeout">
            <summary>
            The amount of time to wait for a table to become unlocked.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.SetBusyTimeoutAsync(System.TimeSpan)">
            <summary>
            Sets the amount of time to wait for a table to become unlocked.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.EnableWriteAheadLoggingAsync">
            <summary>
            Enables the write ahead logging. WAL is significantly faster in most scenarios
            by providing better concurrency and better disk IO performance than the normal
            journal mode. You only need to call this function once in the lifetime of the database.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.StoreDateTimeAsTicks">
            <summary>
            Whether to store DateTime properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.StoreTimeSpanAsTicks">
            <summary>
            Whether to store TimeSpan properties as ticks (true) or strings (false).
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.Trace">
            <summary>
            Whether to writer queries to <see cref="P:SQLite.SQLiteAsyncConnection.Tracer"/> during execution.
            </summary>
            <value>The tracer.</value>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.Tracer">
            <summary>
            The delegate responsible for writing trace lines.
            </summary>
            <value>The tracer.</value>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.TimeExecution">
            <summary>
            Whether Trace lines should be written that show the execution time of queries.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteAsyncConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.ResetPool">
            <summary>
            Closes all connections to all async databases.
            You should *never* need to do this.
            This is a blocking operation that will return when all connections
            have been closed.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetConnection">
            <summary>
            Gets the pooled lockable connection used by this async connection.
            You should never need to use this. This is provided only to add additional
            functionality to SQLite-net. If you use this connection, you must use
            the Lock method on it while using it.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CloseAsync">
            <summary>
            Closes any pooled connections used by the database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.EnableLoadExtensionAsync(System.Boolean)">
            <summary>
            Enable or disable extension loading.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTableAsync``1(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTableAsync(System.Type,SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>  
            <returns>
            Whether the table was created or migrated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTablesAsync``2(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTablesAsync``3(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTablesAsync``4(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTablesAsync``5(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateTablesAsync(SQLite.CreateFlags,System.Type[])">
            <summary>
            Executes a "create table if not exists" on the database for each type. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            Whether the table was created or migrated for each type.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DropTableAsync``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DropTableAsync(SQLite.TableMapping)">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateIndexAsync(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateIndexAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateIndexAsync(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateIndexAsync(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.CreateIndexAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Creates an index for the specified object property.
            e.g. CreateIndex&lt;Client&gt;(c => c.Name);
            </summary>
            <typeparam name="T">Type to reflect to a database table.</typeparam>
            <param name="property">Property to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAsync(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAsync(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAsync(System.Object,System.String)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAsync(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertOrReplaceAsync(System.Object)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertOrReplaceAsync(System.Object,System.Type)">
            <summary>
            Inserts the given object (and updates its
            auto incremented primary key if it has one).
            The return value is the number of rows added to the table.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.UpdateAsync(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.UpdateAsync(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.UpdateAllAsync(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeleteAsync(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeleteAsync``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeleteAsync(System.Object,SQLite.TableMapping)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeleteAllAsync``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeleteAllAsync(SQLite.TableMapping)">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.BackupAsync(System.String,System.String)">
            <summary>
            Backup the entire database to the specified path.
            </summary>
            <param name="destinationDatabasePath">Path to backup file.</param>
            <param name="databaseName">The name of the database to backup (usually "main").</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetAsync``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetAsync(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.FindAsync``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.FindAsync(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.FindAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.FindWithQueryAsync``1(System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type. 
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.FindWithQueryAsync(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Attempts to retrieve the first object that matches the query from the table
            associated with the specified type. 
            </summary>
            <param name="map">
            The TableMapping used to identify the table.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetMappingAsync(System.Type,SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>         
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetMappingAsync``1(SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.GetTableInfoAsync(System.String)">
            <summary>
            Query the built-in sqlite table_info table for a specific tables columns.
            </summary>
            <returns>The columns contains in the table.</returns>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.ExecuteAsync(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAllAsync(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            <param name="runInTransaction"/>
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAllAsync(System.Collections.IEnumerable,System.String,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.InsertAllAsync(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <param name="runInTransaction">
            A boolean indicating if the inserts should be wrapped in a transaction.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.RunInTransactionAsync(System.Action{SQLite.SQLiteConnection})">
            <summary>
            Executes <paramref name="action"/> within a (possibly nested) transaction by wrapping it in a SAVEPOINT. If an
            exception occurs the whole transaction is rolled back, not just the current savepoint. The exception
            is rethrown.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to perform within a transaction. <paramref name="action"/> can contain any number
            of operations on the connection but should never call <see cref="M:SQLite.SQLiteConnection.Commit"/> or
            <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </param>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.ExecuteScalarAsync``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method when return primitive values.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.QueryAsync``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            A list with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.QueryScalarsAsync``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns the first column of each row of the result.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            A list with one result for the first column of each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.QueryAsync(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeferredQueryAsync``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteAsyncConnection.DeferredQueryAsync(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="T:SQLite.AsyncTableQuery`1">
            <summary>
            Query to an asynchronous database connection.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.#ctor(SQLite.TableQuery{`0})">
            <summary>
            Creates a new async query that uses given the synchronous query.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters the query based on a predicate.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.Skip(System.Int32)">
            <summary>
            Skips a given number of elements from the query and then yields the remainder.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.Take(System.Int32)">
            <summary>
            Yields a given number of elements from the query and then skips the remainder.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.ThenBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.ThenByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Order the query results according to a key.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.ToListAsync">
            <summary>
            Queries the database and returns the results as a List.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.ToArrayAsync">
            <summary>
            Queries the database and returns the results as an array.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.CountAsync">
            <summary>
            Execute SELECT COUNT(*) on the query
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Execute SELECT COUNT(*) on the query with an additional WHERE clause.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.ElementAtAsync(System.Int32)">
            <summary>
            Returns the element at a given index
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.FirstAsync">
            <summary>
            Returns the first element of this query.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.FirstOrDefaultAsync">
            <summary>
            Returns the first element of this query, or null if no element is found.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.FirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns the first element of this query that matches the predicate.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete all the rows that match this query and the given predicate.
            </summary>
        </member>
        <member name="M:SQLite.AsyncTableQuery`1.DeleteAsync">
            <summary>
            Delete all the rows that match this query.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnectionPool.Shared">
            <summary>
            Gets the singleton instance of the connection tool.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionPool.Reset">
            <summary>
            Closes all connections managed by this pool.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnectionWithLock">
            <summary>
            This is a normal connection except it contains a Lock method that
            can be used to serialize access to the database
            in lieu of using the sqlite's FullMutex support.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionWithLock.#ctor(SQLite.SQLiteConnectionString)">
            <summary>
            Initializes a new instance of the <see cref="T:SQLite.SQLiteConnectionWithLock"/> class.
            </summary>
            <param name="connectionString">Connection string containing the DatabasePath.</param>
        </member>
        <member name="P:SQLite.SQLiteConnectionWithLock.SkipLock">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:SQLite.SQLiteConnectionWithLock"/> skip lock.
            </summary>
            <value><c>true</c> if skip lock; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:SQLite.SQLiteConnectionWithLock.Lock">
            <summary>
            Lock the database to serialize access to it. To unlock it, call Dispose
            on the returned object.
            </summary>
            <returns>The lock.</returns>
        </member>
    </members>
</doc>
