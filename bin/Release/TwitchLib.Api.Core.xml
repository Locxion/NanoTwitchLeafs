<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchLib.Api.Core</name>
    </assembly>
    <members>
        <member name="T:TwitchLib.Api.Core.Common.Helpers">
            <summary>Static class of helper functions used around the project.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Common.Helpers.FormatOAuth(System.String)">
            <summary>
            Function that extracts just the token for consistency
            </summary>
            <param name="token">Full token string</param>
            <returns></returns>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadGatewayException">
            <inheritdoc />
            <summary>Exception representing a 502 Http Statuscode</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadGatewayException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadParameterException">
            <inheritdoc />
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadParameterException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadRequestException">
            <inheritdoc />
            <summary>Exception representing a request that doesn't have a clientid attached.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadRequestException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadResourceException">
            <inheritdoc />
            <summary>Exception representing an invalid resource</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadResourceException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadScopeException">
            <inheritdoc />
            <summary>Exception representing a provided scope was not permitted.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadScopeException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.BadTokenException">
            <inheritdoc />
            <summary>Exception representing a token not correctly associated with the given user.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.BadTokenException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.ClientIdAndOAuthTokenRequired">
            <inheritdoc />
            <summary>Exception representing a Helix request sent without an OAuth access token</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.ClientIdAndOAuthTokenRequired.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.GatewayTimeoutException">
            <inheritdoc />
            <summary>Exception representing a 504 Http Statuscode</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.GatewayTimeoutException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.InternalServerErrorException">
            <inheritdoc />
            <summary>Exception representing a 500 Http Statuscode</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.InternalServerErrorException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.InvalidCredentialException">
            <inheritdoc />
            <summary>Exception representing a detection that sent credentials were invalid.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.InvalidCredentialException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.NotPartneredException">
            <inheritdoc />
            <summary>Exception representing a request to a partner only resource under an unpartnered account.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.NotPartneredException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.StreamOfflineException">
            <inheritdoc />
            <summary>Exception representing an attempt to fetch stream data on a stream that is offline.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.StreamOfflineException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.TokenExpiredException">
            <inheritdoc />
            <summary>Exception representing a detection that the OAuth token expired</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.TokenExpiredException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.TooManyRequestsException">
            <inheritdoc />
            <summary>Exception representing a 429 Http Statuscode</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.TooManyRequestsException.#ctor(System.String,System.String)">
            <inheritdoc />
            <summary>
            Constructor that allows a reset time to be added
            </summary>
            <param name="data">This is the exception message as a string</param>
            <param name="resetTime">This is the reset time from twitch as a linux timestamp</param>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UnexpectedResponseException">
            <inheritdoc />
            <summary>Exception representing a response received from Twitch that is not expected by the library</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UnexpectedResponseException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.CompleteUpload.MissingPartsException">
            <inheritdoc />
            <summary>Exception thrown attempting to finish an upload without all parts.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.CompleteUpload.MissingPartsException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.CreateVideo.InvalidChannelException">
            <inheritdoc />
            <summary>Exception thrown when attempting to upload to an invalid channel.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.CreateVideo.InvalidChannelException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.CreateVideo.UnauthorizedException">
            <inheritdoc />
            <summary>Exception thrown when the passed access token doesn't have the correct scope.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.CreateVideo.UnauthorizedException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.InternalServerErrorException">
            <inheritdoc />
            <summary>Exception representing an internal server error while creating a video.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.InternalServerErrorException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.InvalidUploadTokenException">
            <inheritdoc />
            <summary>Exception thrown when the identifying video token is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.InvalidUploadTokenException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.InvalidVideoIdException">
            <inheritdoc />
            <summary>Exception thrown when the video Id provided is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.InvalidVideoIdException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.BadPartException">
            <inheritdoc />
            <summary>Exception thrown when this library detects the part is invalid.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.BadPartException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.ContentLengthRequiredException">
            <inheritdoc />
            <summary>Exception thrown when a content-length is missing from the upload request.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.ContentLengthRequiredException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="T:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.UploadFailedException">
            <inheritdoc />
            <summary>Thrown when Twitch reports a failure of the upload.</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.Exceptions.UploadVideo.UploadVideoPart.UploadFailedException.#ctor(System.String)">
            <inheritdoc />
            <summary>Exception constructor</summary>
        </member>
        <member name="M:TwitchLib.Api.Core.HttpCallHandlers.TwitchHttpClient.#ctor(Microsoft.Extensions.Logging.ILogger{TwitchLib.Api.Core.HttpCallHandlers.TwitchHttpClient})">
            <summary>
            Creates an Instance of the TwitchHttpClient Class.
            </summary>
            <param name="logger">Instance Of Logger, otherwise no logging is used,  </param>
        </member>
        <member name="M:TwitchLib.Api.Core.HttpCallHandlers.TwitchWebRequest.#ctor(Microsoft.Extensions.Logging.ILogger{TwitchLib.Api.Core.HttpCallHandlers.TwitchWebRequest})">
            <summary>
            Creates an Instance of the TwitchHttpClient Class.
            </summary>
            <param name="logger">Instance Of Logger, otherwise no logging is used,  </param>
        </member>
        <member name="T:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint">
            <summary>
            <see cref="T:TwitchLib.Api.Core.RateLimiter.CountByIntervalAwaitableConstraint"/> that is able to save own state.
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint.#ctor(System.Int32,System.TimeSpan,System.Action{System.DateTime},System.Collections.Generic.IEnumerable{System.DateTime},TwitchLib.Api.Core.Interfaces.ITime)">
            <summary>
            Create an instance of <see cref="T:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint"/>.
            </summary>
            <param name="count">Maximum actions allowed per time interval.</param>
            <param name="timeSpan">Time interval limits are applied for.</param>
            <param name="saveStateAction">Action is used to save state.</param>
            <param name="initialTimeStamps">Initial timestamps.</param>
        </member>
        <member name="M:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint.OnEnded(System.DateTime)">
            <summary>
            Save state
            </summary>
        </member>
        <member name="M:TwitchLib.Api.Core.RateLimiter.TimeLimiter.GetPersistentTimeLimiter(System.Int32,System.TimeSpan,System.Action{System.DateTime})">
            <summary>
            Create <see cref="T:TwitchLib.Api.Core.RateLimiter.TimeLimiter"/> that will save state using action passed through <paramref name="saveStateAction"/> parameter.
            </summary>
            <param name="maxCount">Maximum actions allowed per time interval.</param>
            <param name="timeSpan">Time interval limits are applied for.</param>
            <param name="saveStateAction">Action is used to save state.</param>
            <returns><see cref="T:TwitchLib.Api.Core.RateLimiter.TimeLimiter"/> instance with <see cref="T:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint"/>.</returns>
        </member>
        <member name="M:TwitchLib.Api.Core.RateLimiter.TimeLimiter.GetPersistentTimeLimiter(System.Int32,System.TimeSpan,System.Action{System.DateTime},System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Create <see cref="T:TwitchLib.Api.Core.RateLimiter.TimeLimiter"/> with initial timestamps that will save state using action passed through <paramref name="saveStateAction"/> parameter.
            </summary>
            <param name="maxCount">Maximum actions allowed per time interval.</param>
            <param name="timeSpan">Time interval limits are applied for.</param>
            <param name="saveStateAction">Action is used to save state.</param>
            <param name="initialTimeStamps">Initial timestamps.</param>
            <returns><see cref="T:TwitchLib.Api.Core.RateLimiter.TimeLimiter"/> instance with <see cref="T:TwitchLib.Api.Core.RateLimiter.PersistentCountByIntervalAwaitableConstraint"/>.</returns>
        </member>
        <member name="T:TwitchLib.Api.Core.Undocumented.Undocumented">
            <summary>These endpoints are pretty cool, but they may stop working at anytime due to changes Twitch makes.</summary>
        </member>
    </members>
</doc>
